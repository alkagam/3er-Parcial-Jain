-- Script de creación de base de datos Oracle para Tienda La Moderna
-- Ejecutar como usuario con privilegios DBA

-- Crear tablespace para la aplicación
CREATE TABLESPACE tienda_data
DATAFILE 'tienda_data01.dbf' SIZE 100M
AUTOEXTEND ON NEXT 10M MAXSIZE 1G;

-- Crear usuario de la aplicación
CREATE USER tienda_user IDENTIFIED BY "TiendaModerna2024!"
DEFAULT TABLESPACE tienda_data
TEMPORARY TABLESPACE temp
QUOTA UNLIMITED ON tienda_data;

-- Otorgar permisos
GRANT CONNECT, RESOURCE TO tienda_user;
GRANT CREATE VIEW, CREATE PROCEDURE, CREATE TRIGGER TO tienda_user;

-- Conectar como tienda_user para crear las tablas
-- CONNECT tienda_user/TiendaModerna2024!

-- Crear tabla de productos

-- ORDEN DE CREACIÓN DE TABLAS EN ORACLE (DEBIDO A DEPENDENCIAS DE CLAVES FORÁNEAS)
-- Las tablas que son referenciadas deben ser creadas primero.

-- 1. Tabla de USUARIOS (no depende de otras tablas)
--    Almacena información de los empleados o usuarios del sistema
CREATE TABLE usuarios (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del usuario
    username VARCHAR2(50) NOT NULL UNIQUE,                  -- Nombre de usuario para iniciar sesión
    password_hash VARCHAR2(255) NOT NULL,                   -- Hash de la contraseña del usuario (seguridad: nunca guardar texto plano)
    nombre VARCHAR2(200) NOT NULL,                          -- Nombre completo del usuario
    email VARCHAR2(100) NOT NULL UNIQUE,                    -- Correo electrónico del usuario
    rol VARCHAR2(20) DEFAULT 'VENDEDOR' CHECK (rol IN ('ADMIN', 'GERENTE', 'VENDEDOR')), -- Rol del usuario para control de permisos
    activo CHAR(1) DEFAULT 'Y' CHECK (activo IN ('Y', 'N')), -- Indica si el usuario está activo (Y) o inactivo (N)
    ultimo_acceso TIMESTAMP,                                -- Fecha y hora del último acceso del usuario al sistema
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de creación del registro del usuario
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Última fecha y hora de modificación del registro del usuario
);

-- 2. Tabla de CATEGORIAS (no depende de otras tablas)
--    Clasifica los productos para una mejor organización
CREATE TABLE categorias (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único de la categoría
    nombre VARCHAR2(100) NOT NULL UNIQUE,                   -- Nombre de la categoría (ej. "Abarrotes", "Limpieza")
    descripcion VARCHAR2(500),                              -- Descripción opcional de la categoría
    activo CHAR(1) DEFAULT 'Y' CHECK (activo IN ('Y', 'N')), -- Indica si la categoría está activa (Y) o inactiva (N)
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de creación del registro de la categoría
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Última fecha y hora de modificación del registro de la categoría
);

-- 3. Tabla de PROVEEDORES (no depende de otras tablas)
--    Almacena información sobre los proveedores de los productos
CREATE TABLE proveedores (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del proveedor
    nombre VARCHAR2(200) NOT NULL,                          -- Nombre o razón social del proveedor
    contacto VARCHAR2(100),                                 -- Nombre de la persona de contacto en el proveedor
    email VARCHAR2(100),                                    -- Correo electrónico del proveedor
    telefono VARCHAR2(20),                                  -- Número de teléfono del proveedor
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de registro del proveedor
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Última fecha y hora de modificación del registro del proveedor
);

-- 4. Tabla de CLIENTES (no depende de otras tablas)
--    Almacena información de los clientes de la tienda
CREATE TABLE clientes (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del cliente
    nombre VARCHAR2(200) NOT NULL,                          -- Nombre completo del cliente
    email VARCHAR2(100),                                    -- Correo electrónico del cliente
    telefono VARCHAR2(20),                                  -- Número de teléfono del cliente
    rfc VARCHAR2(13),                                       -- Registro Federal de Contribuyentes del cliente (opcional)
    fecha_nacimiento DATE,                                  -- Fecha de nacimiento del cliente
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de registro del cliente
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP  -- Última fecha y hora de modificación del registro del cliente
);

-- 5. Tabla de PRODUCTOS (depende de CATEGORIAS y PROVEEDORES)
--    Almacena detalles de los productos en inventario
CREATE TABLE productos (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del producto
    nombre VARCHAR2(200) NOT NULL,                          -- Nombre del producto (ej. "Arroz", "Azúcar")
    descripcion VARCHAR2(500),                              -- Descripción detallada del producto
    precio_venta NUMBER(10,2) NOT NULL CHECK (precio_venta >= 0), -- Precio de venta al público
    precio_compra NUMBER(10,2) NOT NULL CHECK (precio_compra >= 0), -- Costo de adquisición del producto
    stock_actual NUMBER NOT NULL CHECK (stock_actual >= 0), -- Cantidad actual de unidades en inventario
    fecha_caducidad DATE,                                   -- Fecha de caducidad del producto (para reportes y promociones)
    categoria_id NUMBER,                                    -- Clave foránea a la tabla CATEGORIAS
    proveedor_id NUMBER,                                    -- Clave foránea a la tabla PROVEEDORES
    activo CHAR(1) DEFAULT 'Y' CHECK (activo IN ('Y', 'N')), -- Indica si el producto está activo (Y) o inactivo (N) en la venta
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de creación del registro del producto
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Última fecha y hora de modificación del registro del producto
    CONSTRAINT fk_producto_categoria FOREIGN KEY (categoria_id) REFERENCES categorias(id), -- Restricción de clave foránea para CATEGORIAS
    CONSTRAINT fk_producto_proveedor FOREIGN KEY (proveedor_id) REFERENCES proveedores(id) -- Restricción de clave foránea para PROVEEDORES
);

-- 6. Tabla de VENTAS (depende de CLIENTES y USUARIOS)
--    Almacena información de cada transacción de venta
CREATE TABLE ventas (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único de la venta
    folio VARCHAR2(20) UNIQUE NOT NULL,                     -- Número de folio único para la venta
    cliente_id NUMBER,                                      -- Clave foránea a la tabla CLIENTES (puede ser NULL si es venta a público en general)
    usuario_id NUMBER NOT NULL,                             -- Clave foránea a la tabla USUARIOS (quien realizó la venta)
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,              -- Fecha y hora en que se realizó la venta
    subtotal NUMBER(10,2) NOT NULL CHECK (subtotal >= 0),   -- Suma de los precios de los productos antes de impuestos/descuentos
    impuestos NUMBER(10,2) DEFAULT 0 CHECK (impuestos >= 0), -- Monto de impuestos aplicado a la venta
    descuento NUMBER(10,2) DEFAULT 0 CHECK (descuento >= 0), -- Monto total de descuento aplicado a la venta
    total NUMBER(10,2) NOT NULL CHECK (total >= 0),         -- Total final de la venta (subtotal + impuestos - descuento)
    metodo_pago VARCHAR2(20) DEFAULT 'EFECTIVO' CHECK (metodo_pago IN ('EFECTIVO', 'TARJETA', 'TRANSFERENCIA')), -- Método de pago de la venta
    estado VARCHAR2(20) DEFAULT 'COMPLETADA' CHECK (estado IN ('PENDIENTE', 'COMPLETADA', 'CANCELADA')), -- Estado actual de la venta
    observaciones CLOB,                                     -- Campo para observaciones adicionales de la venta
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Última fecha y hora de modificación del registro de la venta
    CONSTRAINT fk_venta_cliente FOREIGN KEY (cliente_id) REFERENCES clientes(id), -- Restricción de clave foránea para CLIENTES
    CONSTRAINT fk_venta_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id)  -- Restricción de clave foránea para USUARIOS
);

-- 7. Tabla de DETALLE_VENTAS (depende de VENTAS y PRODUCTOS)
--    Almacena cada línea de producto vendida dentro de una venta
CREATE TABLE detalle_ventas (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del detalle de venta
    venta_id NUMBER NOT NULL,                               -- Clave foránea a la tabla VENTAS (a qué venta pertenece este detalle)
    producto_id NUMBER NOT NULL,                            -- Clave foránea a la tabla PRODUCTOS (qué producto se vendió)
    cantidad NUMBER NOT NULL CHECK (cantidad > 0),          -- Cantidad de este producto vendida en esta línea
    precio_unitario NUMBER(10,2) NOT NULL CHECK (precio_unitario >= 0), -- Precio al que se vendió la unidad de este producto en esta venta
    subtotal NUMBER(10,2) NOT NULL CHECK (subtotal >= 0),   -- Subtotal de esta línea (cantidad * precio_unitario)
    CONSTRAINT fk_detalle_venta FOREIGN KEY (venta_id) REFERENCES ventas(id) ON DELETE CASCADE, -- Si se elimina la venta, se eliminan sus detalles
    CONSTRAINT fk_detalle_producto FOREIGN KEY (producto_id) REFERENCES productos(id)          -- Restricción de clave foránea para PRODUCTOS
);

-- 8. Tabla de MOVIMIENTOS_INVENTARIO (depende de PRODUCTOS y USUARIOS)
--    Registra todas las entradas y salidas de productos en el inventario
CREATE TABLE movimientos_inventario (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del movimiento
    producto_id NUMBER NOT NULL,                            -- Clave foránea a la tabla PRODUCTOS (producto afectado)
    tipo_movimiento VARCHAR2(20) NOT NULL CHECK (tipo_movimiento IN ('ENTRADA', 'SALIDA', 'AJUSTE')), -- Tipo de movimiento
    cantidad NUMBER NOT NULL,                               -- Cantidad de unidades involucradas
    stock_anterior NUMBER NOT NULL,                         -- Stock del producto antes del movimiento
    stock_nuevo NUMBER NOT NULL,                            -- Stock del producto después del movimiento
    motivo VARCHAR2(100),                                   -- Breve descripción del motivo del movimiento (ej. "Venta", "Compra a proveedor")
    usuario_id NUMBER NOT NULL,                             -- Clave foránea a la tabla USUARIOS (quien registró el movimiento)
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,              -- Fecha y hora del movimiento
    CONSTRAINT fk_movimiento_producto FOREIGN KEY (producto_id) REFERENCES productos(id), -- Restricción de clave foránea para PRODUCTOS
    CONSTRAINT fk_movimiento_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id)     -- Restricción de clave foránea para USUARIOS
);

CREATE INDEX idx_productos_categoria ON productos (categoria_id);
CREATE INDEX idx_productos_proveedor ON productos (proveedor_id);
CREATE INDEX idx_ventas_cliente ON ventas (cliente_id);
CREATE INDEX idx_ventas_usuario ON ventas (usuario_id);
CREATE INDEX idx_detalle_ventas_venta ON detalle_ventas (venta_id);
CREATE INDEX idx_detalle_ventas_producto ON detalle_ventas (producto_id);
CREATE INDEX idx_movimientos_inventario_producto ON movimientos_inventario (producto_id);
CREATE INDEX idx_movimientos_inventario_usuario ON movimientos_inventario (usuario_id);
CREATE INDEX idx_movimientos_inventario_fecha ON movimientos_inventario (fecha);
CREATE INDEX idx_productos_caducidad ON productos (fecha_caducidad);

-- Disparador: TRG_ACTUALIZAR_STOCK_VENTA
-- Propósito: Actualizar automáticamente el stock_actual de un producto en la tabla PRODUCTOS
--            y registrar un movimiento de tipo 'SALIDA' en MOVIMIENTOS_INVENTARIO
--            cada vez que se inserta un nuevo registro en DETALLE_VENTAS.

CREATE OR REPLACE TRIGGER TRG_ACTUALIZAR_STOCK_VENTA
AFTER INSERT ON detalle_ventas
FOR EACH ROW
DECLARE
    v_stock_anterior NUMBER; -- Variable para almacenar el stock del producto antes de la actualización
    v_usuario_id     NUMBER; -- Variable para almacenar el ID del usuario que realizó la venta
BEGIN
    -- Obtener el stock actual del producto antes de la actualización
    SELECT stock_actual INTO v_stock_anterior
    FROM productos
    WHERE id = :NEW.producto_id;

    -- Actualizar el stock_actual del producto en la tabla PRODUCTOS
    -- Resta la cantidad vendida del stock actual del producto
    UPDATE productos
    SET stock_actual = stock_actual - :NEW.cantidad
    WHERE id = :NEW.producto_id;

    -- Obtener el ID del usuario que realizó la venta (desde la tabla VENTAS)
    -- Esto es crucial para registrar quién fue el responsable del movimiento de salida
    SELECT usuario_id INTO v_usuario_id
    FROM ventas
    WHERE id = :NEW.venta_id;

    -- Registrar el movimiento de inventario como una 'SALIDA'
    -- Se inserta un nuevo registro en la tabla MOVIMIENTOS_INVENTARIO
    INSERT INTO movimientos_inventario (
        producto_id,
        tipo_movimiento,
        cantidad,
        stock_anterior,
        stock_nuevo,
        motivo,
        usuario_id,
        fecha
    ) VALUES (
        :NEW.producto_id,           -- El ID del producto afectado por el movimiento
        'SALIDA',                   -- Tipo de movimiento: 'SALIDA' (por venta)
        :NEW.cantidad,              -- Cantidad de unidades que salieron
        v_stock_anterior,           -- Stock del producto antes de este movimiento
        v_stock_anterior - :NEW.cantidad, -- Nuevo stock después de la salida
        'Venta',                    -- Motivo del movimiento: 'Venta'
        v_usuario_id,               -- ID del usuario que realizó la venta
        SYSTIMESTAMP                -- Fecha y hora actual del movimiento
    );

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        -- Manejo de error si el producto o la venta no se encuentran
        -- En un entorno de producción, aquí se podría loguear el error o tomar otra acción
        DBMS_OUTPUT.PUT_LINE('Error: Producto o Venta no encontrado para el detalle de venta.');
    WHEN OTHERS THEN
        -- Manejo de cualquier otra excepción
        DBMS_OUTPUT.PUT_LINE('Error inesperado al actualizar stock o registrar movimiento: ' || SQLERRM);
        -- Opcional: ROLLBACK si este error debe anular la transacción de venta
        -- RAISE; -- Vuelve a lanzar la excepción para que la transacción se revierta
END;
/

-- Procedimiento Almacenado: PR_REPORTE_VENTAS_SEMANAL
-- Propósito: Generar un reporte de ventas para un rango de fechas especificado (ej. una semana).
--            Muestra el resumen de ventas, ventas por método de pago y los productos más vendidos.
 CREATE OR REPLACE PROCEDURE PR_REPORTE_VENTAS_SEMANAL (
    p_fecha_inicio IN DATE,  -- Fecha de inicio del periodo del reporte
    p_fecha_fin    IN DATE   -- Fecha de fin del periodo del reporte
)
AS
    -- Variables para el resumen general de ventas
    v_total_ventas        NUMBER(10,2);
    v_cantidad_ventas     NUMBER;

    -- Cursor para ventas por método de pago
    CURSOR cur_metodo_pago IS
        SELECT
            metodo_pago,
            SUM(total) AS total_por_metodo,
            COUNT(id) AS cantidad_por_metodo
        FROM
            ventas
        WHERE
            fecha >= p_fecha_inicio AND fecha < p_fecha_fin + 1 -- Incluye hasta el final del día p_fecha_fin
        GROUP BY
            metodo_pago
        ORDER BY
            total_por_metodo DESC;

    -- Cursor para los productos más vendidos (TOP 5)
    CURSOR cur_top_productos IS
        SELECT
            p.nombre AS producto_nombre,
            SUM(dv.cantidad) AS cantidad_vendida,
            SUM(dv.subtotal) AS total_generado
        FROM
            detalle_ventas dv
        JOIN
            productos p ON dv.producto_id = p.id
        JOIN
            ventas v ON dv.venta_id = v.id
        WHERE
            v.fecha >= p_fecha_inicio AND v.fecha < p_fecha_fin + 1
        GROUP BY
            p.nombre
        ORDER BY
            cantidad_vendida DESC
        FETCH FIRST 5 ROWS ONLY; -- Limitar a los 5 productos más vendidos

BEGIN
    -- 1. Calcular el resumen general de ventas
    SELECT
        NVL(SUM(total), 0),   -- Suma total de todas las ventas, NVL para 0 si no hay ventas
        NVL(COUNT(id), 0)     -- Cantidad total de transacciones de venta
    INTO
        v_total_ventas,
        v_cantidad_ventas
    FROM
        ventas
    WHERE
        fecha >= p_fecha_inicio AND fecha < p_fecha_fin + 1; -- Rango de fechas inclusivo

    -- Imprimir el encabezado del reporte
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('--- REPORTE SEMANAL DE VENTAS ---');
    DBMS_OUTPUT.PUT_LINE('Periodo: ' || TO_CHAR(p_fecha_inicio, 'DD-MON-YYYY') || ' a ' || TO_CHAR(p_fecha_fin, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('Resumen General:');
    DBMS_OUTPUT.PUT_LINE('------------------');
    DBMS_OUTPUT.PUT_LINE('Total de Ventas: ' || TO_CHAR(v_total_ventas, '999,999,990.00') || ' MXN'); -- Formatear como moneda
    DBMS_OUTPUT.PUT_LINE('Cantidad de Ventas: ' || v_cantidad_ventas);
    DBMS_OUTPUT.PUT_LINE(' ');

    -- 2. Reporte de ventas por método de pago
    DBMS_OUTPUT.PUT_LINE('Ventas por Método de Pago:');
    DBMS_OUTPUT.PUT_LINE('---------------------------');
    FOR rec_metodo IN cur_metodo_pago LOOP
        DBMS_OUTPUT.PUT_LINE('Método: ' || RPAD(rec_metodo.metodo_pago, 15) ||
                             ' | Total: ' || TO_CHAR(rec_metodo.total_por_metodo, '999,990.00') ||
                             ' | Cantidad: ' || rec_metodo.cantidad_por_metodo);
    END LOOP;
    IF cur_metodo_pago%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('No hay ventas registradas para este periodo por método de pago.');
    END IF;
    DBMS_OUTPUT.PUT_LINE(' ');

    -- 3. Reporte de los productos más vendidos (TOP 5)
    DBMS_OUTPUT.PUT_LINE('Productos Más Vendidos (TOP 5):');
    DBMS_OUTPUT.PUT_LINE('--------------------------------');
    FOR rec_producto IN cur_top_productos LOOP
        DBMS_OUTPUT.PUT_LINE('Producto: ' || RPAD(rec_producto.producto_nombre, 30) ||
                             ' | Cantidad: ' || RPAD(rec_producto.cantidad_vendida, 10) ||
                             ' | Generado: ' || TO_CHAR(rec_producto.total_generado, '999,990.00'));
    END LOOP;
    IF cur_top_productos%NOTFOUND THEN
        DBMS_OUTPUT.PUT_LINE('No hay productos vendidos para este periodo.');
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al generar el reporte semanal de ventas: ' || SQLERRM);
END;
/

SET SERVEROUTPUT ON;
EXEC PR_REPORTE_VENTAS_SEMANAL(TO_DATE('2024-06-03', 'YYYY-MM-DD'), TO_DATE('2024-06-09', 'YYYY-MM-DD'));

-- Procedimiento Almacenado: PR_CORTE_DE_CAJA_DIARIO
-- Propósito: Realizar el corte de caja para un día específico.
--            Calcula el total de ventas en efectivo para ese día.
--            Registra el corte de caja en una tabla de LOG de cortes de caja (opcional, pero buena práctica).

-- Primero, vamos a crear una tabla de log para almacenar los cortes de caja diarios.
-- Esto es útil para llevar un historial de los cortes realizados.
-- Si ya tienes una tabla similar, puedes omitir este CREATE TABLE.
CREATE TABLE cortes_caja_log (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- ID único del corte de caja
    fecha_corte DATE NOT NULL UNIQUE,                       -- Fecha del corte de caja (única por día)
    total_ventas_efectivo NUMBER(10,2) NOT NULL,            -- Total de ventas en efectivo para ese día
    total_ventas_tarjeta NUMBER(10,2) NOT NULL,             -- Total de ventas con tarjeta para ese día
    total_ventas_transferencia NUMBER(10,2) NOT NULL,       -- Total de ventas por transferencia para ese día
    total_general_ventas NUMBER(10,2) NOT NULL,             -- Total general de ventas del día
    usuario_id NUMBER,                                      -- Usuario que realizó el corte (opcional)
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     -- Fecha y hora de registro del corte
    CONSTRAINT fk_corte_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id) -- Clave foránea al usuario
);

-- Procedimiento principal para realizar el corte de caja
CREATE OR REPLACE PROCEDURE PR_CORTE_DE_CAJA_DIARIO (
    p_fecha_corte IN DATE,  -- Fecha para la cual se realizará el corte de caja
    p_usuario_id  IN NUMBER DEFAULT NULL -- Opcional: ID del usuario que realiza el corte
)
AS
    v_total_efectivo        NUMBER(10,2) := 0;
    v_total_tarjeta         NUMBER(10,2) := 0;
    v_total_transferencia   NUMBER(10,2) := 0;
    v_total_general         NUMBER(10,2) := 0;
    v_corte_existente       NUMBER;
BEGIN
    -- Verificar si ya existe un corte de caja para la fecha especificada
    SELECT COUNT(*)
    INTO v_corte_existente
    FROM cortes_caja_log
    WHERE fecha_corte = TRUNC(p_fecha_corte); -- TRUNC para asegurar que solo compara la parte de la fecha

    IF v_corte_existente > 0 THEN
        DBMS_OUTPUT.PUT_LINE(' ');
        DBMS_OUTPUT.PUT_LINE('ADVERTENCIA: Ya existe un corte de caja para la fecha ' || TO_CHAR(p_fecha_corte, 'DD-MON-YYYY') || '.');
        DBMS_OUTPUT.PUT_LINE('No se realizará un nuevo registro en el log, pero se mostrarán los totales.');
        DBMS_OUTPUT.PUT_LINE(' ');
    END IF;

    -- Calcular el total de ventas para la fecha especificada, agrupado por método de pago
    SELECT
        NVL(SUM(CASE WHEN metodo_pago = 'EFECTIVO' THEN total ELSE 0 END), 0),
        NVL(SUM(CASE WHEN metodo_pago = 'TARJETA' THEN total ELSE 0 END), 0),
        NVL(SUM(CASE WHEN metodo_pago = 'TRANSFERENCIA' THEN total ELSE 0 END), 0),
        NVL(SUM(total), 0)
    INTO
        v_total_efectivo,
        v_total_tarjeta,
        v_total_transferencia,
        v_total_general
    FROM
        ventas
    WHERE
        fecha >= TRUNC(p_fecha_corte) AND fecha < TRUNC(p_fecha_corte) + 1; -- Ventas de todo el día

    -- Si no existe un corte para ese día, registrarlo en el log
    IF v_corte_existente = 0 THEN
        INSERT INTO cortes_caja_log (
            fecha_corte,
            total_ventas_efectivo,
            total_ventas_tarjeta,
            total_ventas_transferencia,
            total_general_ventas,
            usuario_id
        ) VALUES (
            TRUNC(p_fecha_corte),
            v_total_efectivo,
            v_total_tarjeta,
            v_total_transferencia,
            v_total_general,
            p_usuario_id
        );
        DBMS_OUTPUT.PUT_LINE('Corte de caja para ' || TO_CHAR(p_fecha_corte, 'DD-MON-YYYY') || ' registrado en el log.');
        COMMIT; -- Confirmar la inserción en el log
    END IF;

    -- Imprimir el resumen del corte de caja
    DBMS_OUTPUT.PUT_LINE(' ');
    DBMS_OUTPUT.PUT_LINE('--- CORTE DE CAJA DIARIO ---');
    DBMS_OUTPUT.PUT_LINE('Fecha del Corte: ' || TO_CHAR(p_fecha_corte, 'DD-MON-YYYY'));
    DBMS_OUTPUT.PUT_LINE('----------------------------');
    DBMS_OUTPUT.PUT_LINE('Total Ventas en EFECTIVO:    ' || TO_CHAR(v_total_efectivo, '999,999,990.00') || ' MXN');
    DBMS_OUTPUT.PUT_LINE('Total Ventas con TARJETA:    ' || TO_CHAR(v_total_tarjeta, '999,999,990.00') || ' MXN');
    DBMS_OUTPUT.PUT_LINE('Total Ventas por TRANSFERENCIA: ' || TO_CHAR(v_total_transferencia, '999,999,990.00') || ' MXN');
    DBMS_OUTPUT.PUT_LINE('----------------------------');
    DBMS_OUTPUT.PUT_LINE('TOTAL GENERAL de Ventas del Día: ' || TO_CHAR(v_total_general, '999,999,990.00') || ' MXN');
    DBMS_OUTPUT.PUT_LINE(' ');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- En caso de error, revertir cualquier cambio (como la inserción en el log)
        DBMS_OUTPUT.PUT_LINE('Error al realizar el corte de caja diario: ' || SQLERRM);
END;
/

EXEC PR_CORTE_DE_CAJA_DIARIO(TO_DATE('2025-06-11', 'YYYY-MM-DD'), 1); -- El '1' sería el ID de un usuario


-- VISTAS PARA LA BASE DE DATOS 'TIENDA LA MODERNA'

-- 1. Vista: VW_VENTAS_DETALLE_COMPLETO
-- Propósito: Simplificar las consultas complejas de ventas, uniendo información de Ventas,
--            Detalle_Ventas, Productos, Clientes y Usuarios.
CREATE OR REPLACE VIEW VW_VENTAS_DETALLE_COMPLETO AS
SELECT
    v.id AS venta_id,
    v.folio AS venta_folio,
    v.fecha AS venta_fecha,
    v.total AS venta_total,
    v.metodo_pago AS venta_metodo_pago,
    v.estado AS venta_estado,
    c.nombre AS cliente_nombre,
    c.email AS cliente_email,
    u.nombre AS usuario_nombre,
    u.rol AS usuario_rol,
    dv.id AS detalle_id,
    p.nombre AS producto_nombre,
    p.descripcion AS producto_descripcion,
    dv.cantidad AS detalle_cantidad,
    dv.precio_unitario AS detalle_precio_unitario,
    dv.subtotal AS detalle_subtotal_linea,
    p.precio_compra AS producto_precio_compra,
    cat.nombre AS categoria_nombre,
    prov.nombre AS proveedor_nombre
FROM
    ventas v
JOIN
    detalle_ventas dv ON v.id = dv.venta_id
JOIN
    productos p ON dv.producto_id = p.id
LEFT JOIN -- LEFT JOIN porque un cliente podría no estar registrado (cliente_id es NULL)
    clientes c ON v.cliente_id = c.id
JOIN
    usuarios u ON v.usuario_id = u.id
LEFT JOIN
    categorias cat ON p.categoria_id = cat.id
LEFT JOIN
    proveedores prov ON p.proveedor_id = prov.id
ORDER BY
    v.fecha DESC, v.id, dv.id;

-- 2. Vista: VW_PRODUCTOS_BAJO_STOCK
-- Propósito: Mostrar rápidamente los productos cuyo stock actual es menor a 5 unidades.
--            Útil para las alertas de Don Manolo.
CREATE OR REPLACE VIEW VW_PRODUCTOS_BAJO_STOCK AS
SELECT
    p.id AS producto_id,
    p.nombre AS producto_nombre,
    p.descripcion AS producto_descripcion,
    p.stock_actual,
    p.precio_venta,
    cat.nombre AS categoria_nombre,
    prov.nombre AS proveedor_nombre
FROM
    productos p
LEFT JOIN
    categorias cat ON p.categoria_id = cat.id
LEFT JOIN
    proveedores prov ON p.proveedor_id = prov.id
WHERE
    p.stock_actual < 5
    AND p.activo = 'Y'
ORDER BY
    p.stock_actual ASC, p.nombre;

-- 3. Vista: VW_PRODUCTOS_POR_CADUCAR
-- Propósito: Listar los productos que caducarán en los próximos 7 días,
--            ayudando a Don Manolo a identificarlos para promociones.
CREATE OR REPLACE VIEW VW_PRODUCTOS_POR_CADUCAR AS
SELECT
    p.id AS producto_id,
    p.nombre AS producto_nombre,
    p.descripcion AS producto_descripcion,
    p.stock_actual,
    p.fecha_caducidad,
    p.precio_venta,
    cat.nombre AS categoria_nombre
FROM
    productos p
LEFT JOIN
    categorias cat ON p.categoria_id = cat.id
WHERE
    p.fecha_caducidad IS NOT NULL -- Asegurarse de que tengan fecha de caducidad
    AND p.fecha_caducidad <= SYSDATE + 7 -- Caducan en los próximos 7 días (incluyendo hoy)
    AND p.fecha_caducidad >= SYSDATE - INTERVAL '1' YEAR -- Evitar productos ya muy caducados o fechas erróneas antiguas
    AND p.activo = 'Y'
ORDER BY
    p.fecha_caducidad ASC, p.nombre;


-- 4. Vista: VW_CORTES_CAJA_SUMARIO
-- Propósito: Ofrecer una visión simplificada y sumaria de los cortes de caja diarios.
CREATE OR REPLACE VIEW VW_CORTES_CAJA_SUMARIO AS
SELECT
    ccl.id AS corte_id,
    ccl.fecha_corte,
    ccl.total_ventas_efectivo,
    ccl.total_ventas_tarjeta,
    ccl.total_ventas_transferencia,
    ccl.total_general_ventas,
    u.nombre AS usuario_corte_nombre,
    ccl.fecha_registro AS fecha_registro_corte
FROM
    cortes_caja_log ccl
LEFT JOIN
    usuarios u ON ccl.usuario_id = u.id
ORDER BY
    ccl.fecha_corte DESC;
    
    

-- Para ver todas las ventas con sus detalles y nombres de clientes/productos
SELECT * FROM VW_VENTAS_DETALLE_COMPLETO;

-- Para ver solo los productos que necesitan ser repuestos
SELECT producto_nombre, stock_actual FROM VW_PRODUCTOS_BAJO_STOCK;

-- Para ver los productos que caducarán pronto para hacer ofertas
SELECT producto_nombre, fecha_caducidad, stock_actual FROM VW_PRODUCTOS_POR_CADUCAR;

-- Para consultar el historial de cortes de caja
SELECT fecha_corte, total_general_ventas FROM VW_CORTES_CAJA_SUMARIO WHERE fecha_corte = TRUNC(SYSDATE);    


 ALTER TABLE detalle_ventas DISABLE CONSTRAINT fk_detalle_producto;
 ALTER TABLE productos DISABLE CONSTRAINT fk_producto_categoria;
 ALTER TABLE productos DISABLE CONSTRAINT fk_producto_proveedor;
 ALTER TABLE ventas DISABLE CONSTRAINT fk_venta_cliente;
 ALTER TABLE ventas DISABLE CONSTRAINT fk_venta_usuario;
 ALTER TABLE movimientos_inventario DISABLE CONSTRAINT fk_movimiento_producto;
 ALTER TABLE movimientos_inventario DISABLE CONSTRAINT fk_movimiento_usuario;
 ALTER TABLE cortes_caja_log DISABLE CONSTRAINT fk_corte_usuario;

-- 1. Insertar datos en la tabla USUARIOS
-- Contraseñas son hashes simulados (ej. 'password')
INSERT INTO usuarios (username, password_hash, nombre, email, rol, activo) VALUES ('admin', 'hash_admin123', 'Juan Pérez', 'juan.perez@tienda.com', 'ADMIN', 'Y');
INSERT INTO usuarios (username, password_hash, nombre, email, rol, activo) VALUES ('gerente', 'hash_gerente456', 'María García', 'maria.garcia@tienda.com', 'GERENTE', 'Y');
INSERT INTO usuarios (username, password_hash, nombre, email, rol, activo) VALUES ('vendedor1', 'hash_vendedor789', 'Carlos López', 'carlos.lopez@tienda.com', 'VENDEDOR', 'Y');
INSERT INTO usuarios (username, password_hash, nombre, email, rol, activo) VALUES ('vendedor2', 'hash_vendedor012', 'Ana Ramírez', 'ana.ramirez@tienda.com', 'VENDEDOR', 'Y');
INSERT INTO usuarios (username, password_hash, nombre, email, rol, activo) VALUES ('inventario', 'hash_inventario345', 'Pedro Gómez', 'pedro.gomez@tienda.com', 'VENDEDOR', 'Y');
COMMIT;

-- 2. Insertar datos en la tabla CATEGORIAS
INSERT INTO categorias (nombre, descripcion) VALUES ('Abarrotes', 'Productos básicos de despensa');
INSERT INTO categorias (nombre, descripcion) VALUES ('Lácteos', 'Productos derivados de la leche');
INSERT INTO categorias (nombre, descripcion) VALUES ('Bebidas', 'Refrescos, jugos, agua');
INSERT INTO categorias (nombre, descripcion) VALUES ('Limpieza', 'Productos para el hogar');
INSERT INTO categorias (nombre, descripcion) VALUES ('Snacks', 'Bocadillos y botanas');
INSERT INTO categorias (nombre, descripcion) VALUES ('Cuidado Personal', 'Higiene y belleza');
COMMIT;

-- 3. Insertar datos en la tabla PROVEEDORES
INSERT INTO proveedores (nombre, contacto, email, telefono) VALUES ('Distribuidora La Central', 'Luis Sánchez', 'contacto@lacentral.com', '5512345678');
INSERT INTO proveedores (nombre, contacto, email, telefono) VALUES ('Alimentos del Campo S.A.', 'Elena Robles', 'ventas@alimentosdelcampo.com', '5587654321');
INSERT INTO proveedores (nombre, contacto, email, telefono) VALUES ('Bebidas Refrescantes S. de R.L.', 'Arturo Vidal', 'info@bebidasrefrescantes.com', '5523456789');
INSERT INTO proveedores (nombre, contacto, email, telefono) VALUES ('Químicos Limpios', 'Sofía Hernández', 'soporte@quimicoslimpios.com', '5534567890');
INSERT INTO proveedores (nombre, contacto, email, telefono) VALUES ('Dulces y Más', 'Roberto Paz', 'ventas@dulcesymas.com', '5545678901');
COMMIT;

-- 4. Insertar datos en la tabla CLIENTES
-- Usar sysdate para fechas recientes
INSERT INTO clientes (nombre, email, telefono, rfc, fecha_nacimiento, fecha_registro) VALUES ('María Fernanda', 'maria.f@mail.com', '5511223344', 'MAFE900101ABC', TO_DATE('1990-01-01', 'YYYY-MM-DD'), SYSDATE - INTERVAL '30' DAY);
INSERT INTO clientes (nombre, email, telefono, rfc, fecha_nacimiento, fecha_registro) VALUES ('José Luis Martínez', 'jose.luis@mail.com', '5522334455', 'JOEL850515DEF', TO_DATE('1985-05-15', 'YYYY-MM-DD'), SYSDATE - INTERVAL '25' DAY);
INSERT INTO clientes (nombre, email, telefono, rfc, fecha_nacimiento, fecha_registro) VALUES ('Ana Sofía Pérez', 'ana.s@mail.com', '5533445566', NULL, TO_DATE('1992-08-20', 'YYYY-MM-DD'), SYSDATE - INTERVAL '20' DAY);
INSERT INTO clientes (nombre, email, telefono, rfc, fecha_nacimiento, fecha_registro) VALUES ('Pedro Antonio Gómez', NULL, '5544556677', NULL, TO_DATE('1978-03-10', 'YYYY-MM-DD'), SYSDATE - INTERVAL '15' DAY);
INSERT INTO clientes (nombre, email, telefono, rfc, fecha_nacimiento, fecha_registro) VALUES ('Laura G. Díaz', 'laura.d@mail.com', '5555667788', 'LGDZ751122GHI', TO_DATE('1975-11-22', 'YYYY-MM-DD'), SYSDATE - INTERVAL '10' DAY);
COMMIT;

-- 5. Insertar datos en la tabla PRODUCTOS
-- Fechas de caducidad variadas, algunas cercanas
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Arroz Grano Largo 1kg', 'Arroz blanco de grano largo', 25.50, 18.00, 50, SYSDATE + 120, 1, 1);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Frijol Negro 500g', 'Frijol negro empacado', 20.00, 14.50, 45, SYSDATE + 150, 1, 1);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Leche Entera 1L', 'Leche de vaca pasteurizada', 28.00, 20.00, 30, SYSDATE + 7, 2, 2); -- ¡Cerca de caducar!
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Yogurt Natural 1L', 'Yogurt sin azúcar', 35.00, 25.00, 20, SYSDATE + 3, 2, 2); -- ¡Cerca de caducar!
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Refresco Cola 600ml', 'Bebida carbonatada de cola', 18.00, 12.00, 60, SYSDATE + 90, 3, 3);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Agua Purificada 1L', 'Agua embotellada', 12.00, 7.00, 80, SYSDATE + 365, 3, 3);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Detergente Líquido 1L', 'Detergente para ropa', 45.00, 30.00, 25, NULL, 4, 4); -- Sin caducidad
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Jabón de Barra', 'Jabón de tocador', 10.00, 6.00, 100, SYSDATE + 730, 6, 4);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Papas Fritas 150g', 'Snack de papas saladas', 15.00, 9.00, 4, SYSDATE + 60, 5, 5); -- ¡Bajo Stock!
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Galletas de Animalitos', 'Galletas tradicionales', 22.00, 15.00, 10, SYSDATE + 90, 1, 5);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Atún en Lata', 'Atún en aceite o agua', 20.00, 14.00, 5, SYSDATE + 180, 1, 1);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Cereal de Maíz 300g', 'Cereal para desayuno', 30.00, 20.00, 12, SYSDATE + 200, 1, 2);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Jugo de Naranja 1L', 'Jugo natural de naranja', 26.00, 18.00, 28, SYSDATE + 45, 3, 3);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Desodorante Roll-on', 'Desodorante antitranspirante', 40.00, 28.00, 15, SYSDATE + 300, 6, 4);
INSERT INTO productos (nombre, descripcion, precio_venta, precio_compra, stock_actual, fecha_caducidad, categoria_id, proveedor_id) VALUES ('Chocolate en Barra', 'Chocolate dulce para postre', 12.00, 8.00, 3, SYSDATE + 70, 5, 5); -- ¡Bajo Stock!
COMMIT;

-- 6. Insertar datos en la tabla VENTAS
-- Se insertarán ventas recientes, algunas con cliente_id, otras sin (público general)
-- Se usarán usuarios 3 (vendedor1) y 4 (vendedor2)
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V001', 1, 3, SYSDATE - INTERVAL '10' DAY + INTERVAL '08' HOUR, 100.00, 16.00, 5.00, 111.00, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V002', NULL, 3, SYSDATE - INTERVAL '9' DAY + INTERVAL '09' HOUR, 50.00, 8.00, 0.00, 58.00, 'TARJETA', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V003', 2, 4, SYSDATE - INTERVAL '8' DAY + INTERVAL '10' HOUR, 75.00, 12.00, 0.00, 87.00, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V004', NULL, 4, SYSDATE - INTERVAL '7' DAY + INTERVAL '11' HOUR, 30.00, 4.80, 0.00, 34.80, 'TRANSFERENCIA', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V005', 1, 3, SYSDATE - INTERVAL '6' DAY + INTERVAL '12' HOUR, 120.00, 19.20, 10.00, 129.20, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V006', 3, 3, SYSDATE - INTERVAL '5' DAY + INTERVAL '13' HOUR, 80.00, 12.80, 0.00, 92.80, 'TARJETA', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V007', NULL, 4, SYSDATE - INTERVAL '4' DAY + INTERVAL '14' HOUR, 40.00, 6.40, 0.00, 46.40, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V008', 4, 4, SYSDATE - INTERVAL '3' DAY + INTERVAL '15' HOUR, 60.00, 9.60, 0.00, 69.60, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V009', 5, 3, SYSDATE - INTERVAL '2' DAY + INTERVAL '16' HOUR, 90.00, 14.40, 0.00, 104.40, 'TRANSFERENCIA', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V010', NULL, 3, SYSDATE - INTERVAL '1' DAY + INTERVAL '17' HOUR, 70.00, 11.20, 0.00, 81.20, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V011', 1, 4, SYSDATE - INTERVAL '0' DAY + INTERVAL '09' HOUR, 45.00, 7.20, 0.00, 52.20, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V012', 2, 4, SYSDATE - INTERVAL '0' DAY + INTERVAL '10' HOUR, 35.00, 5.60, 0.00, 40.60, 'TARJETA', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V013', NULL, 3, SYSDATE - INTERVAL '0' DAY + INTERVAL '11' HOUR, 25.00, 4.00, 0.00, 29.00, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V014', 3, 3, SYSDATE - INTERVAL '0' DAY + INTERVAL '12' HOUR, 55.00, 8.80, 0.00, 63.80, 'EFECTIVO', 'COMPLETADA');
INSERT INTO ventas (folio, cliente_id, usuario_id, fecha, subtotal, impuestos, descuento, total, metodo_pago, estado) VALUES ('V015', NULL, 4, SYSDATE - INTERVAL '0' DAY + INTERVAL '13' HOUR, 65.00, 10.40, 0.00, 75.40, 'EFECTIVO', 'COMPLETADA');
COMMIT;


-- 7. Insertar datos en la tabla DETALLE_VENTAS
-- Asegurarse de que el stock_actual de PRODUCTOS se decrementará por el TRIGGER TRG_ACTUALIZAR_STOCK_VENTA
-- Venta V001
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (1, 1, 2, 25.50, 51.00); -- Arroz
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (1, 5, 3, 18.00, 54.00); -- Refresco Cola
-- Venta V002
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (2, 3, 1, 28.00, 28.00); -- Leche Entera
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (2, 9, 1, 15.00, 15.00); -- Papas Fritas (stock 4 -> 3)
-- Venta V003
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (3, 2, 1, 20.00, 20.00); -- Frijol Negro
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (3, 7, 1, 45.00, 45.00); -- Detergente Líquido
-- Venta V004
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (4, 6, 2, 12.00, 24.00); -- Agua Purificada
-- Venta V005
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (5, 1, 3, 25.50, 76.50); -- Arroz
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (5, 10, 1, 22.00, 22.00); -- Galletas Animalitos
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (5, 15, 1, 12.00, 12.00); -- Chocolate (stock 3 -> 2)
-- Venta V006
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (6, 4, 1, 35.00, 35.00); -- Yogurt Natural
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (6, 11, 2, 20.00, 40.00); -- Atún en Lata
-- Venta V007
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (7, 5, 1, 18.00, 18.00); -- Refresco Cola
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (7, 8, 1, 10.00, 10.00); -- Jabón de Barra
-- Venta V008
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (8, 12, 1, 30.00, 30.00); -- Cereal de Maíz
-- Venta V009
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (9, 13, 2, 26.00, 52.00); -- Jugo de Naranja
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (9, 14, 1, 40.00, 40.00); -- Desodorante
-- Venta V010
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (10, 1, 1, 25.50, 25.50); -- Arroz
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (10, 2, 1, 20.00, 20.00); -- Frijol
-- Venta V011
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (11, 3, 1, 28.00, 28.00); -- Leche Entera (stock 30 -> 29)
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (11, 9, 1, 15.00, 15.00); -- Papas Fritas (stock 3 -> 2)
-- Venta V012
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (12, 4, 1, 35.00, 35.00); -- Yogurt Natural (stock 20 -> 19)
-- Venta V013
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (13, 5, 1, 18.00, 18.00); -- Refresco Cola
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (13, 6, 1, 12.00, 12.00); -- Agua Purificada
-- Venta V014
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (14, 11, 1, 20.00, 20.00); -- Atún en Lata
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (14, 15, 1, 12.00, 12.00); -- Chocolate (stock 2 -> 1)
-- Venta V015
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (15, 10, 1, 22.00, 22.00); -- Galletas Animalitos
INSERT INTO detalle_ventas (venta_id, producto_id, cantidad, precio_unitario, subtotal) VALUES (15, 12, 1, 30.00, 30.00); -- Cereal de Maíz
COMMIT;

-- 8. Insertar datos en la tabla CORTES_CAJA_LOG
-- Estos registros simulan cortes de caja diarios realizados por los usuarios.
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '10' DAY), 111.00, 0.00, 0.00, 111.00, 3);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '9' DAY), 0.00, 58.00, 0.00, 58.00, 3);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '8' DAY), 87.00, 0.00, 0.00, 87.00, 4);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '7' DAY), 0.00, 0.00, 34.80, 34.80, 4);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '6' DAY), 129.20, 0.00, 0.00, 129.20, 3);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '5' DAY), 0.00, 92.80, 0.00, 92.80, 3);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '4' DAY), 46.40, 0.00, 0.00, 46.40, 4);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '3' DAY), 69.60, 0.00, 0.00, 69.60, 4);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '2' DAY), 0.00, 0.00, 104.40, 104.40, 3);
INSERT INTO cortes_caja_log (fecha_corte, total_ventas_efectivo, total_ventas_tarjeta, total_ventas_transferencia, total_general_ventas, usuario_id)
VALUES (TRUNC(SYSDATE - INTERVAL '1' DAY), 81.20, 0.00, 0.00, 81.20, 3);
COMMIT;


-- 9. Insertar datos en la tabla MOVIMIENTOS_INVENTARIO
-- (Algunos ya se habrán insertado por el TRIGGER TRG_ACTUALIZAR_STOCK_VENTA al insertar DETALLE_VENTAS)
-- Estos son movimientos adicionales como entradas por compra o ajustes
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (1, 'ENTRADA', 100, 50, 150, 'Compra a proveedor inicial', 5, SYSDATE - INTERVAL '30' DAY);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (9, 'ENTRADA', 20, 0, 20, 'Inventario inicial', 5, SYSDATE - INTERVAL '25' DAY);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (15, 'ENTRADA', 15, 0, 15, 'Inventario inicial', 5, SYSDATE - INTERVAL '28' DAY);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (7, 'AJUSTE', -5, 25, 20, 'Producto dañado', 5, SYSDATE - INTERVAL '5' DAY);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (3, 'ENTRADA', 50, 29, 79, 'Compra a proveedor', 5, SYSDATE - INTERVAL '1' DAY);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (9, 'ENTRADA', 10, 2, 12, 'Compra a proveedor', 5, SYSDATE);
INSERT INTO movimientos_inventario (producto_id, tipo_movimiento, cantidad, stock_anterior, stock_nuevo, motivo, usuario_id, fecha)
VALUES (15, 'ENTRADA', 10, 1, 11, 'Compra a proveedor', 5, SYSDATE);
COMMIT;

 ALTER TABLE detalle_ventas ENABLE CONSTRAINT fk_detalle_producto;
 ALTER TABLE productos ENABLE CONSTRAINT fk_producto_categoria;
 ALTER TABLE productos ENABLE CONSTRAINT fk_producto_proveedor;
 ALTER TABLE ventas ENABLE CONSTRAINT fk_venta_cliente;
 ALTER TABLE ventas ENABLE CONSTRAINT fk_venta_usuario;
 ALTER TABLE movimientos_inventario ENABLE CONSTRAINT fk_movimiento_producto;
 ALTER TABLE movimientos_inventario ENABLE CONSTRAINT fk_movimiento_usuario;
 ALTER TABLE cortes_caja_log ENABLE CONSTRAINT fk_corte_usuario;


 -- CONSULTAS ESPECÍFICAS PARA CORTES DE CAJA

-- 1. Consulta para el Corte de Caja por un Día Específico
--    Muestra el total de ventas (general y por método de pago) para una fecha dada.
--    Puedes reemplazar '2025-06-11' con la fecha que desees consultar.
SELECT
    TRUNC(fecha) AS fecha_venta, -- Truncar la fecha para solo obtener el día
    SUM(CASE WHEN metodo_pago = 'EFECTIVO' THEN total ELSE 0 END) AS total_efectivo,
    SUM(CASE WHEN metodo_pago = 'TARJETA' THEN total ELSE 0 END) AS total_tarjeta,
    SUM(CASE WHEN metodo_pago = 'TRANSFERENCIA' THEN total ELSE 0 END) AS total_transferencia,
    SUM(total) AS total_general_dia,
    COUNT(id) AS cantidad_ventas_dia
FROM
    ventas
WHERE
    TRUNC(fecha) = TO_DATE('2025-06-11', 'YYYY-MM-DD') -- Reemplaza con la fecha deseada
GROUP BY
    TRUNC(fecha);

-- 2. Consulta para el Corte de Caja por un Intervalo Abierto de Tiempo
--    Muestra el total de ventas (general y por método de pago) dentro de un rango de fechas.
--    Puedes reemplazar '2025-06-01' y '2025-06-11' con el rango que necesites.
SELECT
    TRUNC(fecha) AS fecha_venta,
    SUM(CASE WHEN metodo_pago = 'EFECTIVO' THEN total ELSE 0 END) AS total_efectivo,
    SUM(CASE WHEN metodo_pago = 'TARJETA' THEN total ELSE 0 END) AS total_tarjeta,
    SUM(CASE WHEN metodo_pago = 'TRANSFERENCIA' THEN total ELSE 0 END) AS total_transferencia,
    SUM(total) AS total_general_dia,
    COUNT(id) AS cantidad_ventas_dia
FROM
    ventas
WHERE
    fecha >= TO_DATE('2025-06-01', 'YYYY-MM-DD') -- Fecha de inicio del intervalo (inclusive)
    AND fecha < TO_DATE('2025-06-12', 'YYYY-MM-DD') -- Fecha de fin del intervalo (exclusiva para el día siguiente)
GROUP BY
    TRUNC(fecha)
ORDER BY
    fecha_venta;