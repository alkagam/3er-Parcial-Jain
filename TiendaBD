-- #############################################################################
-- #                        SCRIPTS DE CREACIÓN DE BASE DE DATOS               #
-- #                        TIENDA LA MODERNA - FASE 1                         #
-- #                        SGBD: ORACLE DATABASE 20c                          #
-- #############################################################################

-- =============================================================================
-- 1. CREACIÓN DEL USUARIO (ESQUEMA) Y ASIGNACIÓN DE PERMISOS
--    Ejecutar con un usuario con privilegios (ej. SYS o SYSTEM)
-- =============================================================================

-- Eliminar el usuario si ya existe (para pruebas o re-creación)
-- DROP USER TIENDAMODERNA CASCADE;

-- Crear un nuevo usuario para la aplicación
CREATE USER TIENDAMODERNA IDENTIFIED BY tu_password_segura
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA UNLIMITED ON USERS;

-- Otorgar permisos básicos al nuevo usuario
GRANT CONNECT TO TIENDAMODERNA;
GRANT RESOURCE TO TIENDAMODERNA;
GRANT CREATE VIEW TO TIENDAMODERNA;
GRANT CREATE PROCEDURE TO TIENDAMODERNA;
GRANT CREATE TRIGGER TO TIENDAMODERNA;
GRANT CREATE SEQUENCE TO TIENDAMODERNA;

-- Otorgar permisos adicionales para ejecutar procedimientos y vistas (si fuesen por otro esquema)
-- ALTER USER TIENDAMODERNA QUOTA UNLIMITED ON USERS;


-- #############################################################################
-- # A partir de aquí, conectarse como el usuario TIENDAMODERNA para ejecutar #
-- # el resto de los scripts.                                                  #
-- #############################################################################


-- =============================================================================
-- 2. CREACIÓN DE SECUENCIAS PARA AUTO-INCREMENTO DE IDs
--    Estas secuencias se usarán para generar valores únicos para las claves primarias
-- =============================================================================
CREATE SEQUENCE SEQ_PRODUCTOS START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CLIENTES START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_PROVEEDORES START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_VENTAS START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_DETALLE_VENTAS START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CUENTAS_EFECTIVO START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE SEQ_CORTES_CAJA START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- =============================================================================
-- 3. CREACIÓN DE TABLAS
--    Definición de las estructuras de las tablas con sus columnas, tipos de datos
--    y restricciones NOT NULL.
-- =============================================================================

-- Tabla PRODUCTOS
CREATE TABLE PRODUCTOS (
    ID_PRODUCTO     NUMBER(10)      DEFAULT SEQ_PRODUCTOS.NEXTVAL PRIMARY KEY,
    NOMBRE          VARCHAR2(100)   NOT NULL,
    DESCRIPCION     VARCHAR2(500),
    PRECIO          NUMBER(10, 2)   NOT NULL CHECK (PRECIO >= 0),
    STOCK           NUMBER(10)      NOT NULL CHECK (STOCK >= 0),
    FECHA_CADUCIDAD DATE,
    ID_PROVEEDOR    NUMBER(10)      NOT NULL
);

-- Tabla CLIENTES
CREATE TABLE CLIENTES (
    ID_CLIENTE      NUMBER(10)      DEFAULT SEQ_CLIENTES.NEXTVAL PRIMARY KEY,
    NOMBRE          VARCHAR2(100)   NOT NULL,
    APELLIDO        VARCHAR2(100),
    DIRECCION       VARCHAR2(255),
    TELEFONO        VARCHAR2(20)
);

-- Tabla PROVEEDORES
CREATE TABLE PROVEEDORES (
    ID_PROVEEDOR    NUMBER(10)      DEFAULT SEQ_PROVEEDORES.NEXTVAL PRIMARY KEY,
    NOMBRE          VARCHAR2(100)   NOT NULL,
    TELEFONO        VARCHAR2(20),
    CONTACTO        VARCHAR2(100)
);

-- Tabla VENTAS
CREATE TABLE VENTAS (
    ID_Venta        NUMBER(10)      DEFAULT SEQ_VENTAS.NEXTVAL PRIMARY KEY,
    FECHA_VENTA     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
    TOTAL_VENTA     NUMBER(10, 2)   NOT NULL CHECK (TOTAL_VENTA >= 0),
    ID_CLIENTE      NUMBER(10)
);

-- Tabla DETALLE_VENTAS
CREATE TABLE DETALLE_VENTAS (
    ID_DETALLE      NUMBER(10)      DEFAULT SEQ_DETALLE_VENTAS.NEXTVAL PRIMARY KEY,
    ID_VENTA        NUMBER(10)      NOT NULL,
    ID_PRODUCTO     NUMBER(10)      NOT NULL,
    CANTIDAD        NUMBER(10)      NOT NULL CHECK (CANTIDAD > 0),
    PRECIO_UNITARIO NUMBER(10, 2)   NOT NULL CHECK (PRECIO_UNITARIO >= 0)
);

-- Tabla CUENTAS_EFECTIVO (Para el control exclusivo en efectivo)
CREATE TABLE CUENTAS_EFECTIVO (
    ID_CUENTA       NUMBER(10)      DEFAULT SEQ_CUENTAS_EFECTIVO.NEXTVAL PRIMARY KEY,
    NOMBRE_CUENTA   VARCHAR2(100)   DEFAULT 'Caja Principal' NOT NULL UNIQUE,
    MONTO_ACTUAL    NUMBER(10, 2)   DEFAULT 0 NOT NULL CHECK (MONTO_ACTUAL >= 0)
);

-- Tabla CORTES_CAJA (Para registrar los cortes de caja históricos)
CREATE TABLE CORTES_CAJA (
    ID_CORTE        NUMBER(10)      DEFAULT SEQ_CORTES_CAJA.NEXTVAL PRIMARY KEY,
    FECHA_CORTE     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
    MONTO_CORTE     NUMBER(10, 2)   NOT NULL,
    VENTAS_REALIZADAS_DIA NUMBER(10) NOT NULL -- Número de ventas consolidadas en este corte
);


-- =============================================================================
-- 4. DEFINICIÓN DE CLAVES FORÁNEAS (FOREIGN KEYS)
-- =============================================================================

ALTER TABLE PRODUCTOS
ADD CONSTRAINT FK_PRODUCTOS_PROVEEDORES
FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDORES(ID_PROVEEDOR);

ALTER TABLE VENTAS
ADD CONSTRAINT FK_VENTAS_CLIENTES
FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTE);

ALTER TABLE DETALLE_VENTAS
ADD CONSTRAINT FK_DETALLE_VENTAS_VENTAS
FOREIGN KEY (ID_VENTA) REFERENCES VENTAS(ID_VENTA) ON DELETE CASCADE; -- Si se borra una venta, sus detalles se borran

ALTER TABLE DETALLE_VENTAS
ADD CONSTRAINT FK_DETALLE_VENTAS_PRODUCTOS
FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO);


-- =============================================================================
-- 5. PROCEDIMIENTOS ALMACENADOS (PL/SQL)
-- =============================================================================

-- Procedimiento para gestionar Productos (CRUD: Create, Read, Update, Delete)
CREATE OR REPLACE PROCEDURE SP_GestionarProducto (
    p_operacion     VARCHAR2,   -- 'INSERT', 'UPDATE', 'DELETE', 'SELECT_ONE', 'SELECT_ALL'
    p_id_producto   NUMBER      DEFAULT NULL,
    p_nombre        VARCHAR2    DEFAULT NULL,
    p_descripcion   VARCHAR2    DEFAULT NULL,
    p_precio        NUMBER      DEFAULT NULL,
    p_stock         NUMBER      DEFAULT NULL,
    p_fecha_caducidad DATE      DEFAULT NULL,
    p_id_proveedor  NUMBER      DEFAULT NULL,
    -- Parámetros de salida para SELECT_ONE (solo si el frontend no los obtiene por sí solo)
    o_nombre        OUT VARCHAR2,
    o_descripcion   OUT VARCHAR2,
    o_precio        OUT NUMBER,
    o_stock         OUT NUMBER,
    o_fecha_caducidad OUT DATE,
    o_id_proveedor  OUT NUMBER
)
AS
BEGIN
    IF p_operacion = 'INSERT' THEN
        INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
        VALUES (p_nombre, p_descripcion, p_precio, p_stock, p_fecha_caducidad, p_id_proveedor);
    ELSIF p_operacion = 'UPDATE' THEN
        UPDATE PRODUCTOS
        SET
            NOMBRE = NVL(p_nombre, NOMBRE),
            DESCRIPCION = NVL(p_descripcion, DESCRIPCION),
            PRECIO = NVL(p_precio, PRECIO),
            STOCK = NVL(p_stock, STOCK),
            FECHA_CADUCIDAD = NVL(p_fecha_caducidad, FECHA_CADUCIDAD),
            ID_PROVEEDOR = NVL(p_id_proveedor, ID_PROVEEDOR)
        WHERE ID_PRODUCTO = p_id_producto;
    ELSIF p_operacion = 'DELETE' THEN
        DELETE FROM PRODUCTOS WHERE ID_PRODUCTO = p_id_producto;
    ELSIF p_operacion = 'SELECT_ONE' THEN
        SELECT NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR
        INTO o_nombre, o_descripcion, o_precio, o_stock, o_fecha_caducidad, o_id_proveedor
        FROM PRODUCTOS
        WHERE ID_PRODUCTO = p_id_producto;
    END IF;
    -- COMMIT; -- Generalmente se hace COMMIT desde la aplicación para manejar transacciones más grandes
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'Producto no encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_GestionarProducto: ' || SQLERRM);
END;
/

-- Procedimiento para gestionar Clientes (CRUD)
CREATE OR REPLACE PROCEDURE SP_GestionarCliente (
    p_operacion     VARCHAR2,   -- 'INSERT', 'UPDATE', 'DELETE', 'SELECT_ONE'
    p_id_cliente    NUMBER      DEFAULT NULL,
    p_nombre        VARCHAR2    DEFAULT NULL,
    p_apellido      VARCHAR2    DEFAULT NULL,
    p_direccion     VARCHAR2    DEFAULT NULL,
    p_telefono      VARCHAR2    DEFAULT NULL,
    o_nombre        OUT VARCHAR2,
    o_apellido      OUT VARCHAR2,
    o_direccion     OUT VARCHAR2,
    o_telefono      OUT VARCHAR2
)
AS
BEGIN
    IF p_operacion = 'INSERT' THEN
        INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO)
        VALUES (p_nombre, p_apellido, p_direccion, p_telefono);
    ELSIF p_operacion = 'UPDATE' THEN
        UPDATE CLIENTES
        SET
            NOMBRE = NVL(p_nombre, NOMBRE),
            APELLIDO = NVL(p_apellido, APELLIDO),
            DIRECCION = NVL(p_direccion, DIRECCION),
            TELEFONO = NVL(p_telefono, TELEFONO)
        WHERE ID_CLIENTE = p_id_cliente;
    ELSIF p_operacion = 'DELETE' THEN
        DELETE FROM CLIENTES WHERE ID_CLIENTE = p_id_cliente;
    ELSIF p_operacion = 'SELECT_ONE' THEN
        SELECT NOMBRE, APELLIDO, DIRECCION, TELEFONO
        INTO o_nombre, o_apellido, o_direccion, o_telefono
        FROM CLIENTES
        WHERE ID_CLIENTE = p_id_cliente;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Cliente no encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_GestionarCliente: ' || SQLERRM);
END;
/

-- Procedimiento para gestionar Proveedores (CRUD)
CREATE OR REPLACE PROCEDURE SP_GestionarProveedor (
    p_operacion     VARCHAR2,   -- 'INSERT', 'UPDATE', 'DELETE', 'SELECT_ONE'
    p_id_proveedor  NUMBER      DEFAULT NULL,
    p_nombre        VARCHAR2    DEFAULT NULL,
    p_telefono      VARCHAR2    DEFAULT NULL,
    p_contacto      VARCHAR2    DEFAULT NULL,
    o_nombre        OUT VARCHAR2,
    o_telefono      OUT VARCHAR2,
    o_contacto      OUT VARCHAR2
)
AS
BEGIN
    IF p_operacion = 'INSERT' THEN
        INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO)
        VALUES (p_nombre, p_telefono, p_contacto);
    ELSIF p_operacion = 'UPDATE' THEN
        UPDATE PROVEEDORES
        SET
            NOMBRE = NVL(p_nombre, NOMBRE),
            TELEFONO = NVL(p_telefono, TELEFONO),
            CONTACTO = NVL(p_contacto, CONTACTO)
        WHERE ID_PROVEEDOR = p_id_proveedor;
    ELSIF p_operacion = 'DELETE' THEN
        DELETE FROM PROVEEDORES WHERE ID_PROVEEDOR = p_id_proveedor;
    ELSIF p_operacion = 'SELECT_ONE' THEN
        SELECT NOMBRE, TELEFONO, CONTACTO
        INTO o_nombre, o_telefono, o_contacto
        FROM PROVEEDORES
        WHERE ID_PROVEEDOR = p_id_proveedor;
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'Proveedor no encontrado.');
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_GestionarProveedor: ' || SQLERRM);
END;
/

-- Tipo de objeto para los ítems de venta (necesario para pasar un array de objetos)
-- Esto permite pasar una estructura más compleja al procedimiento SP_RealizarVenta
CREATE OR REPLACE TYPE T_REC_ITEM_VENTA AS OBJECT (
    id_producto NUMBER,
    cantidad NUMBER,
    precio_unitario NUMBER
);
/

CREATE OR REPLACE TYPE T_TAB_ITEMS_VENTA AS TABLE OF T_REC_ITEM_VENTA;
/

-- Procedimiento SP_RealizarVenta
-- p_items_venta se espera como un CLOB que contiene un JSON array
-- Ejemplo de p_items_venta: '[{"id_producto":1, "cantidad":2, "precio_unitario":10.50}, {"id_producto":2, "cantidad":1, "precio_unitario":25.00}]'
CREATE OR REPLACE PROCEDURE SP_RealizarVenta (
    p_id_cliente        NUMBER,
    p_items_venta_json  CLOB
)
AS
    v_total_venta       NUMBER(10, 2) := 0;
    v_id_venta          NUMBER(10);
    v_json_array        JSON_ARRAY_T;
    v_json_object       JSON_OBJECT_T;
    v_id_producto       NUMBER;
    v_cantidad          NUMBER;
    v_precio_unitario   NUMBER;
    v_stock_actual      NUMBER;
BEGIN
    -- Crear una nueva venta
    INSERT INTO VENTAS (ID_CLIENTE, TOTAL_VENTA)
    VALUES (p_id_cliente, 0) -- Se actualizará el total al final
    RETURNING ID_VENTA INTO v_id_venta;

    -- Parsear el CLOB JSON
    v_json_array := JSON_ARRAY_T.parse(p_items_venta_json);

    -- Iterar sobre los ítems de la venta
    FOR i IN 0 .. v_json_array.get_size - 1 LOOP
        v_json_object := TREAT(v_json_array.get(i) AS JSON_OBJECT_T);

        v_id_producto := v_json_object.get_number('id_producto');
        v_cantidad := v_json_object.get_number('cantidad');
        v_precio_unitario := v_json_object.get_number('precio_unitario');

        -- Obtener stock actual del producto
        SELECT STOCK INTO v_stock_actual FROM PRODUCTOS WHERE ID_PRODUCTO = v_id_producto FOR UPDATE; -- Bloquear fila

        -- Validar stock antes de insertar detalle
        IF v_stock_actual < v_cantidad THEN
            RAISE_APPLICATION_ERROR(-20004, 'Stock insuficiente para el producto ID: ' || v_id_producto || '. Stock actual: ' || v_stock_actual || ', Cantidad solicitada: ' || v_cantidad);
        END IF;

        -- Insertar en DETALLE_VENTAS
        INSERT INTO DETALLE_VENTAS (ID_VENTA, ID_PRODUCTO, CANTIDAD, PRECIO_UNITARIO)
        VALUES (v_id_venta, v_id_producto, v_cantidad, v_precio_unitario);

        -- Actualizar el stock del producto
        UPDATE PRODUCTOS
        SET STOCK = STOCK - v_cantidad
        WHERE ID_PRODUCTO = v_id_producto;

        -- Sumar al total de la venta
        v_total_venta := v_total_venta + (v_cantidad * v_precio_unitario);
    END LOOP;

    -- Actualizar el total de la venta
    UPDATE VENTAS
    SET TOTAL_VENTA = v_total_venta
    WHERE ID_VENTA = v_id_venta;

    COMMIT; -- Confirmar la transacción completa
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK; -- Deshacer todo en caso de error
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_RealizarVenta: ' || SQLERRM);
END;
/

-- Procedimiento SP_CorteCajaDiario
-- Realiza el corte de caja para las ventas del día actual y actualiza la cuenta de efectivo.
CREATE OR REPLACE PROCEDURE SP_CorteCajaDiario
AS
    v_total_ventas_dia  NUMBER(10, 2) := 0;
    v_num_ventas_dia    NUMBER(10) := 0;
BEGIN
    -- Calcular el total de ventas del día actual
    SELECT NVL(SUM(TOTAL_VENTA), 0), COUNT(ID_VENTA)
    INTO v_total_ventas_dia, v_num_ventas_dia
    FROM VENTAS
    WHERE TRUNC(FECHA_VENTA) = TRUNC(SYSTIMESTAMP);

    -- Actualizar el monto en la cuenta de efectivo (asume ID_CUENTA = 1 para la caja principal)
    -- Si no existe la cuenta, la inserta. Si existe, la actualiza.
    MERGE INTO CUENTAS_EFECTIVO ce
    USING (SELECT 1 AS id_cuenta_ref FROM DUAL) src
    ON (ce.ID_CUENTA = src.id_cuenta_ref)
    WHEN MATCHED THEN
        UPDATE SET MONTO_ACTUAL = ce.MONTO_ACTUAL + v_total_ventas_dia
    WHEN NOT MATCHED THEN
        INSERT (ID_CUENTA, NOMBRE_CUENTA, MONTO_ACTUAL)
        VALUES (SEQ_CUENTAS_EFECTIVO.NEXTVAL, 'Caja Principal', v_total_ventas_dia);

    -- Registrar el corte de caja en la tabla CORTES_CAJA
    INSERT INTO CORTES_CAJA (MONTO_CORTE, VENTAS_REALIZADAS_DIA)
    VALUES (v_total_ventas_dia, v_num_ventas_dia);

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_CorteCajaDiario: ' || SQLERRM);
END;
/

-- Procedimiento SP_GenerarReporteVentasSemanal
-- Este procedimiento no devuelve un cursor directamente para una API REST,
-- sino que se usaría para generar un reporte que la aplicación podría luego consultar
-- O bien, para devolver los datos en una estructura JSON/CLOB.
-- Para simplicidad en este ejemplo, se podría considerar una VIEW o una consulta directa desde Node.js
-- Si se requiere un procedimiento, podría ser:

CREATE OR REPLACE PROCEDURE SP_GenerarReporteVentasSemanal (
    o_reporte_json OUT CLOB
)
AS
    v_json_reporte JSON_OBJECT_T;
    v_ventas_semana SYS_REFCURSOR;
    v_total_semana NUMBER := 0;
    v_num_ventas_semana NUMBER := 0;
BEGIN
    OPEN v_ventas_semana FOR
        SELECT TRUNC(FECHA_VENTA) AS FECHA, SUM(TOTAL_VENTA) AS TOTAL_DIA, COUNT(ID_VENTA) AS NUM_VENTAS_DIA
        FROM VENTAS
        WHERE FECHA_VENTA >= TRUNC(SYSDATE - 7) AND FECHA_VENTA < TRUNC(SYSDATE)
        GROUP BY TRUNC(FECHA_VENTA)
        ORDER BY FECHA ASC;

    -- Construir el JSON de salida (ejemplo simplificado)
    v_json_reporte := JSON_OBJECT_T(); -- CORRECCIÓN: Inicializar con el constructor JSON_OBJECT_T()
    v_json_reporte.put('rango_fecha', 'Últimos 7 días');
    
    -- Recorrer el cursor y agregar al JSON
    -- Esta parte es más compleja para construir JSON de forma dinámica en PL/SQL
    -- Normalmente, para reportes, es más eficiente dejar que la aplicación (Node.js)
    -- haga la consulta y construya el JSON.
    -- Aquí solo se calcula el total general y el número de ventas
    SELECT NVL(SUM(TOTAL_VENTA), 0), COUNT(ID_Venta)
    INTO v_total_semana, v_num_ventas_semana
    FROM VENTAS
    WHERE FECHA_VENTA >= TRUNC(SYSDATE - 7) AND FECHA_VENTA < TRUNC(SYSDATE);

    v_json_reporte.put('total_semanal', v_total_semana);
    v_json_reporte.put('numero_ventas_semanal', v_num_ventas_semana);

    o_reporte_json := v_json_reporte.to_clob;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20000, 'Error en SP_GenerarReporteVentasSemanal: ' || SQLERRM);
END;
/


-- =============================================================================
-- 6. DISPARADORES (TRIGGERS PL/SQL)
-- =============================================================================

-- Disparador para validar el stock antes de insertar en DETALLE_VENTAS
-- y actualizar el stock del producto
CREATE OR REPLACE TRIGGER TRG_Actualizar_Stock_Detalle
BEFORE INSERT ON DETALLE_VENTAS
FOR EACH ROW
DECLARE
    v_current_stock NUMBER;
BEGIN
    -- Obtener el stock actual del producto (asegurando el bloqueo para concurrencia)
    SELECT STOCK INTO v_current_stock
    FROM PRODUCTOS
    WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO FOR UPDATE OF STOCK;

    -- Validar si hay suficiente stock
    IF v_current_stock < :NEW.CANTIDAD THEN
        RAISE_APPLICATION_ERROR(-20005, 'Stock insuficiente para el producto ID: ' || :NEW.ID_PRODUCTO || '. Stock disponible: ' || v_current_stock);
    END IF;

    -- Si hay suficiente stock, decrementar directamente el stock del producto
    UPDATE PRODUCTOS
    SET STOCK = STOCK - :NEW.CANTIDAD
    WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO;
END;
/

-- Opcional: Si SP_RealizarVenta ya maneja el stock, este trigger se podría omitir
-- o modificarse para solo validar. El SP_RealizarVenta actual ya maneja la disminución.
-- Sin embargo, es buena práctica tener un trigger para validación a nivel de DB.


-- =============================================================================
-- 7. VISTAS (SQL)
-- =============================================================================

-- Vista para productos con menos de 5 unidades en stock
CREATE OR REPLACE VIEW V_PRODUCTOS_BAJO_STOCK AS
SELECT
    P.ID_PRODUCTO,
    P.NOMBRE, -- CORRECCIÓN: Se especificó P.NOMBRE para evitar ambigüedad
    P.DESCRIPCION,
    P.PRECIO,
    P.STOCK,
    P.FECHA_CADUCIDAD,
    P.ID_PROVEEDOR,
    PR.NOMBRE AS NOMBRE_PROVEEDOR
FROM
    PRODUCTOS P
JOIN
    PROVEEDORES PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR
WHERE
    STOCK < 5
ORDER BY
    STOCK ASC;


-- Vista para productos a menos de una semana de caducar
CREATE OR REPLACE VIEW V_PRODUCTOS_POR_CADUCAR AS
SELECT
    ID_PRODUCTO,
    NOMBRE,
    DESCRIPCION,
    PRECIO,
    STOCK,
    FECHA_CADUCIDAD,
    P.ID_PROVEEDOR,
    PR.NOMBRE AS NOMBRE_PROVEEDOR
FROM
    PRODUCTOS P
JOIN
    PROVEEDORES PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR
WHERE
    FECHA_CADUCIDAD IS NOT NULL AND FECHA_CADUCIDAD BETWEEN SYSDATE AND SYSDATE + 7
ORDER BY
    FECHA_CADUCIDAD ASC;


-- Vista para productos a menos de una semana de caducar
CREATE OR REPLACE VIEW V_PRODUCTOS_POR_CADUCAR AS
SELECT
    P.ID_PRODUCTO,
    P.NOMBRE, -- CORRECCIÓN: Se especificó P.NOMBRE para evitar ambigüedad
    P.DESCRIPCION,
    P.PRECIO,
    P.STOCK,
    P.FECHA_CADUCIDAD,
    P.ID_PROVEEDOR,
    PR.NOMBRE AS NOMBRE_PROVEEDOR
FROM
    PRODUCTOS P
JOIN
    PROVEEDORES PR ON P.ID_PROVEEDOR = PR.ID_PROVEEDOR
WHERE
    FECHA_CADUCIDAD IS NOT NULL AND FECHA_CADUCIDAD BETWEEN SYSDATE AND SYSDATE + 7
ORDER BY
    FECHA_CADUCIDAD ASC;


CREATE OR REPLACE VIEW V_RESUMEN_VENTAS_DIARIAS AS
SELECT
    TRUNC(FECHA_VENTA) AS FECHA_DEL_DIA,
    SUM(TOTAL_VENTA) AS TOTAL_VENTAS_DIA,
    COUNT(ID_VENTA) AS NUMERO_VENTAS_DIA
FROM
    VENTAS
GROUP BY
    TRUNC(FECHA_VENTA)
ORDER BY
    FECHA_DEL_DIA DESC;


-- =============================================================================
-- 8. CONSULTAS ESPECÍFICAS (Ejemplos, el backend las construirá dinámicamente)
-- =============================================================================

---PRUEBAS PARA CONSULTAR
SELECT * FROM PRODUCTOS;
SELECT NOMBRE, PRECIO, STOCK FROM PRODUCTOS;
SELECT NOMBRE, FECHA_CADUCIDAD
FROM PRODUCTOS
WHERE FECHA_CADUCIDAD <= SYSDATE + 7;--Productos proximos a caducar
SELECT NOMBRE, ID_PROVEEDOR
FROM PRODUCTOS
WHERE ID_PROVEEDOR = 2;--Consultar productos de un proveddor en especifico


-- Consulta para corte de caja por un día específico (ejemplo para el backend)
-- SELECT SUM(TOTAL_VENTA) AS TOTAL_DIA_ESPECIFICO FROM V_RESUMEN_VENTAS_DIARIAS WHERE FECHA_DEL_DIA = TO_DATE('2024-06-14', 'YYYY-MM-DD');

-- Consulta para corte de caja por un intervalo abierto de tiempo (ejemplo para el backend)
-- SELECT SUM(TOTAL_VENTA) AS TOTAL_INTERVALO FROM VENTAS WHERE FECHA_VENTA BETWEEN TO_TIMESTAMP('2024-06-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND TO_TIMESTAMP('2024-06-14 23:59:59', 'YYYY-MM-DD HH24:MI:SS');


-- =============================================================================
-- 9. INSERCIÓN DE DATOS DE PRUEBA (OPCIONAL)
--    Para poblar la base de datos y facilitar las pruebas
-- =============================================================================

INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Proveedor Abarrotes', '5512345678', 'Juan Pérez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Proveedor Lácteos', '5587654321', 'María López');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Distribuidora El Trigo', '5551234567', 'Pedro Ramírez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Productos del Hogar', '5567891234', 'Laura Méndez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Frescos del Campo', '5543218765', 'José Martínez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Bebidas y Refrescos MX', '5576543210', 'Ana Gómez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Limpieza Total', '5598765432', 'Carlos Herrera');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Panadería del Valle', '5522334455', 'Elena Vargas');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Carnes Selectas', '5533445566', 'Rubén Torres');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Verduras y Frutas Leo', '5511223344', 'Lorena Pérez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Lácteos La Vaquita', '5588997766', 'Gabriela Flores');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Distribuciones El Faro', '5577112233', 'Javier López');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Abarrotes del Norte', '5544667788', 'Marta Jiménez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Higiene Familiar SA', '5533556677', 'Raúl Salgado');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Aceites y Enlatados Ruiz', '5566123344', 'Daniela Ruiz');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Botanas La Esquina', '5577889900', 'Ignacio Cárdenas');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Productos Naturales Sol', '5522678912', 'Sofía Aguilar');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Dulcería El Buen Sabor', '5588123456', 'Luis Estrada');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Embutidos Selectos', '5544789652', 'Paola Mendoza');
--------------------
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Marinela Distribuciones', '5533221100', 'Carlos Martínez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Bimbo S.A. de C.V.', '5544556677', 'Ana Gómez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Refrescos Jarrito', '5566778899', 'Luis Ramírez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Coca-Cola México', '5512349876', 'Martha Sánchez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Tía Rosa S.A.', '5599887744', 'Jorge Hernández');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Distribuidora La Fábrica', '5533445566', 'Sofía López');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Snacks y Golosinas S.A.', '5511223344', 'Ricardo Torres');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Bebidas Refrescantes S.A.', '5577889900', 'Claudia Pérez');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Alimentos Rápidos S.A.', '5588776655', 'Miguel Castillo');
INSERT INTO PROVEEDORES (NOMBRE, TELEFONO, CONTACTO) VALUES ('Panadería y Más', '5599332211', 'Elena Morales');

COMMIT;

-----Insertar productos

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Leche Entera', 'Leche pasteurizada 1L', 25.00, 10, SYSDATE + 10, 2);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Arroz Grano Fino', 'Arroz blanco 1kg', 30.50, 4, SYSDATE + 180, 1);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Aceite Vegetal', 'Botella de aceite 900ml', 45.00, 20, SYSDATE + 300, 1);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Yogurt Fresa', 'Yogurt batido 150gr', 12.00, 3, SYSDATE + 4, 2); -- Este estará bajo stock y por caducar
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Pan de Caja', 'Pan blanco 600gr', 35.00, 7, SYSDATE + 3, 1); -- Este estará por caducar
-- Proveedor 1: Abarrotes Don Miguel (ID_PROVEEDOR = 1)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Frijol Negro', 'Frijol negro en bolsa de 1kg', 32.00, 15, SYSDATE + 365, 1);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Azúcar Refinada', 'Azúcar blanca 1kg', 26.50, 10, SYSDATE + 365, 1);
-- Proveedor 2: Proveedor Lácteos (ID_PROVEEDOR = 2)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Queso Oaxaca', 'Queso fresco 250gr', 45.00, 5, SYSDATE + 6, 2);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Crema Ácida', 'Crema 500ml', 30.00, 6, SYSDATE + 8, 2);
-- Proveedor 3: Bebidas y Refrescos Martínez (ID_PROVEEDOR = 3)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Refresco Cola 2L', 'Bebida carbonatada sabor cola', 29.00, 20, SYSDATE + 180, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Agua Embotellada', 'Agua natural 1L', 18.00, 25, SYSDATE + 300, 3);
-- Proveedor 4: Panadería La Espiga (ID_PROVEEDOR = 4)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Bolillo', 'Pan individual fresco', 3.50, 30, SYSDATE + 1, 4);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Pan Integral', 'Pan rebanado 600gr', 40.00, 6, SYSDATE + 4, 4);
-- Proveedor 5: Carnes El Norteño (ID_PROVEEDOR = 5)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Salchicha Viena', 'Paquete 500gr', 32.00, 8, SYSDATE + 10, 5);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Jamón de Pavo', 'Empaque 250gr', 28.00, 7, SYSDATE + 5, 5);
-- Proveedor 6: Verduras Frescas La Huerta (ID_PROVEEDOR = 6)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Zanahoria', 'Bolsa 1kg', 14.00, 12, SYSDATE + 3, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Papa Blanca', 'Bolsa 1kg', 18.50, 10, SYSDATE + 5, 6);
-- Proveedor 7: Botanas La Esquina (ID_PROVEEDOR = 7)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Papas Fritas', 'Bolsa 150gr', 16.00, 20, SYSDATE + 90, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Churritos Picantes', 'Botana de maíz con chile', 14.50, 15, SYSDATE + 120, 7);
-- Proveedor 8: Productos Naturales Sol (ID_PROVEEDOR = 8)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Avena Integral', 'Bolsa de 1kg', 22.00, 9, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Granola Mixta', 'Con nuez, avena y pasas', 38.00, 6, SYSDATE + 300, 8);
-- Proveedor 9: Dulcería El Buen Sabor (ID_PROVEEDOR = 9)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Paletas de Fruta', 'Paquete 10 piezas', 25.00, 10, SYSDATE + 180, 9);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Gomitas Ácidas', 'Bolsa 150gr', 18.00, 8, SYSDATE + 365, 9);
-- Proveedor 10: Embutidos Selectos (ID_PROVEEDOR = 10)
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Chorizo Español', 'Paquete 300gr', 42.00, 5, SYSDATE + 7, 10);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR)
VALUES ('Salami Rebanado', 'Empaque 250gr', 36.00, 4, SYSDATE + 6, 10);
-----------------------
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Gansito Marinela', 'Paquete 60g', 15.00, 20, SYSDATE + 20, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Submarinos Marinela', 'Paquete 60g', 14.00, 18, SYSDATE + 25, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Pingüinos Marinela', 'Paquete 50g', 16.00, 22, SYSDATE + 15, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Tortugas Marinela', 'Paquete 60g', 15.50, 10, SYSDATE + 18, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Roles Marinela', 'Paquete 75g', 17.00, 15, SYSDATE + 30, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Donitas Marinela', 'Paquete 50g', 12.00, 25, SYSDATE + 10, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Marcianos Marinela', 'Paquete 45g', 13.00, 14, SYSDATE + 12, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Barritas Marinela', 'Paquete 35g', 11.50, 20, SYSDATE + 40, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Galletas Choco Chips Marinela', 'Paquete 60g', 14.00, 19, SYSDATE + 35, 6);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Cuernitos Marinela', 'Paquete 70g', 15.00, 12, SYSDATE + 20, 6);

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Mantecadas Bimbo', 'Paquete 6 pzas', 22.00, 10, SYSDATE + 15, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Negritos Bimbo', 'Paquete 60g', 14.00, 15, SYSDATE + 10, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Pan Blanco Bimbo', 'Paquete 680g', 40.00, 25, SYSDATE + 5, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Pan Integral Bimbo', 'Paquete 680g', 42.00, 20, SYSDATE + 7, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Conchas Bimbo', 'Paquete 70g', 18.00, 18, SYSDATE + 12, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Roles de Canela Bimbo', 'Paquete 75g', 20.00, 15, SYSDATE + 20, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Cuernitos Bimbo', 'Paquete 70g', 17.00, 10, SYSDATE + 14, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Barras de Granola Bimbo', 'Paquete 35g', 16.00, 22, SYSDATE + 40, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Galletas Emperador Bimbo', 'Paquete 60g', 15.00, 30, SYSDATE + 45, 3);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Panqués Bimbo', 'Paquete 65g', 14.50, 28, SYSDATE + 35, 3);

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Limón', 'Botella 600ml', 18.00, 50, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Tamarindo', 'Botella 600ml', 18.00, 45, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Piña', 'Botella 600ml', 18.00, 40, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Mango', 'Botella 600ml', 18.50, 35, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Mandarina', 'Botella 600ml', 18.00, 42, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Uva', 'Botella 600ml', 19.00, 38, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Fresa', 'Botella 600ml', 18.50, 30, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Jamaica', 'Botella 600ml', 18.00, 25, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Cereza', 'Botella 600ml', 18.00, 28, SYSDATE + 365, 7);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Jarritos Durazno', 'Botella 600ml', 18.50, 33, SYSDATE + 365, 7);

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Coca-Cola lata', '355ml', 15.00, 100, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Coca-Cola botella', '600ml', 18.00, 80, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Coca-Cola zero', '600ml', 20.00, 70, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Coca-Cola botella grande', '2L', 32.00, 50, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Sprite lata', '355ml', 15.00, 90, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Fanta naranja lata', '355ml', 15.00, 85, SYSDATE + 365, 8);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Fanta uva botella', '600ml', 18.00, 60, SYSDATE + 365, 8);

INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Conchas Tía Rosa', 'Paquete 70g', 16.00, 25, SYSDATE + 20, 9);
INSERT INTO PRODUCTOS (NOMBRE, DESCRIPCION, PRECIO, STOCK, FECHA_CADUCIDAD, ID_PROVEEDOR) VALUES ('Cuernitos Tía Rosa', 'Paquete 70g', 17.50, 20, SYSDATE + 15, 9);



COMMIT;


--Insertar clientes
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Ana', 'García', 'Calle Falsa 123', '5511223344');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Luis', 'Martínez', 'Avenida Siempre Viva 45', '5599887766');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Ana', 'García', 'Calle Falsa 123', '5511223344');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Luis', 'Martínez', 'Avenida Siempre Viva 45', '5599887766');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('María', 'López', 'Colonia Centro #54', '5523456789');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Carlos', 'Ramírez', 'Calle del Sol 678', '5534567890');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Sofía', 'Hernández', 'Privada Las Palmas 22', '5545678901');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Jorge', 'Pérez', 'Av. Reforma 888', '5556789012');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Fernanda', 'Santos', 'Calle Luna 99', '5567890123');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Diego', 'Morales', 'Av. Insurgentes Sur 145', '5578901234');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Valeria', 'Castillo', 'Circuito Interior 303', '5589012345');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Andrés', 'Ruiz', 'Callejón del Agua 12', '5590123456');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Lucía', 'Vargas', 'Av. Universidad 456', '5501234567');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Ricardo', 'Gómez', 'Camino Viejo a Mixcoac 78', '5512345670');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Camila', 'Navarro', 'Col. Jardines del Sur 150', '5523456701');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Elena', 'Mendoza', 'Calle Roble 234', '5534567012');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Pablo', 'Fuentes', 'Av. Tláhuac 990', '5545670123');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Isabela', 'Zúñiga', 'Boulevard Aeropuerto 45', '5556701234');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Roberto', 'Delgado', 'Calle Periférico 789', '5567012345');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Alicia', 'Reyes', 'Callejón de la Amargura 1', '5570123456');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Tomás', 'Nieto', 'Prolongación Reforma 111', '5581234567');
INSERT INTO CLIENTES (NOMBRE, APELLIDO, DIRECCION, TELEFONO) VALUES ('Diana', 'Campos', 'Av. Cuauhtémoc 654', '5592345678');
COMMIT;
-- Inicializar cuentas de efectivo (solo una vez)
INSERT INTO CUENTAS_EFECTIVO (NOMBRE_CUENTA, MONTO_ACTUAL) VALUES ('Caja Principal', 0);
INSERT INTO CUENTAS_EFECTIVO (NOMBRE_CUENTA, MONTO_ACTUAL) VALUES ('Caja Secundaria', 0);
COMMIT;
